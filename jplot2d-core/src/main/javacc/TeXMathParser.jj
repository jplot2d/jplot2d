 
options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
	JAVA_UNICODE_ESCAPE = false;
	JDK_VERSION = "1.5";
	STATIC = false;
}
PARSER_BEGIN(TeXMathParser)
package org.jplot2d.javacc;

import java.util.ArrayList;
import java.util.List;

import org.jplot2d.tex.MathElement;

/*
 * The purpose of this tex parser is maximum compatible with plain text and LaTex math mode. 
 * Differient with LaTex:
 * common: A command must be followed with a pair of {}, spaces between them are allowed.
 * plain text mode: only escape \ group {} math $ are reserved character
 *                  \n is new line, \\ is backslash, \$ is $, \{ is {, \} is }.
 * math mode : A command for special character is LEFT-MATCH-1ST. It is VALID if no space behind the command
 */
public class TeXMathParser {

	/* Wrap the given pe into a mrow. If the pe is mrow, donot wrap again */
	private MathElement.PElement mrowWrap(MathElement.PElement pe) {
		if (pe == null) return new MathElement.Mrow();
		if (pe instanceof MathElement.Mrow) return (MathElement.Mrow) pe;
		return pe;
	}

	/** escape the special charactors in the given string */
	public static String escape(String s)	{		return s.replace("\\", "\\\\").replace("$", "\\$").replace("{", "\\{").replace("}", "\\}");
	}

}
PARSER_END(TeXMathParser)

<*> TOKEN :
{
	< LCB : "{" >
|	< RCB : "}" >
|	< ESCAPE	: "\\" >
|	< C_DOLLAR	: "\\$" >
|	< C_LCB		: "\\{" >|	< C_RCB		: "\\}" >
|	< C_BACKSLASH	: "\\\\" >
|	< TEXTRM : "\\textrm" >
|	< TEXTIT : "\\textit" > 
| 	< TEXTBF : "\\textbf" >
}
<DEFAULT> TOKEN :
{
	< MATHB		: "$" > : MATH
|	< SPACE		: " " >
|	< C_NEWLINE	: "\n" >
|	< NEWLINE	: "\\n" >
|	< TEXTCHAR		: ~[] >
}
<MATH> SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
<MATH> TOKEN :
{
	< MATHE : "$" > : DEFAULT
|	< MN	: (["0"-"9"])+ ("." (["0"-"9"])*)? | "." (["0"-"9"])* >
|	< MINUS: "-" >
|	< MO : "+" | "*" | "/" | ">" | ">=" | "<" | "<=" | "=" | "==" | "," >
|	< LP : "(" >
|	< RP : ")" >
|	< SUB : "_" >
|	< SUP : "^" >
}
<MATH> TOKEN :
{	< MATHRM : "\\mathrm" >
|	< MATHIT : "\\mathit" > 
| 	< MATHBF : "\\mathbf" >
}
<MATH> TOKEN :
{
	< ALPHA : "\\alpha" >
|	< BETA	: "\\beta" >
|	< GAMMA	: "\\gamma" >
|	< DELTA	: "\\delta" >
|	< EPSILON	: "\\epsilon" >
|	< ZETA	: "\\zeta" >
|	< ETA	: "\\eta" >
|	< THETA	: "\\theta" >
|	< IOTA	: "\\iota" >
|	< KAPPA	: "\\kappa" >
|	< LAMDA	: "\\lambda" >
|	< MU	: "\\mu" >
|	< NU	: "\\nu" >
|	< XI	: "\\xi" >
|	< PI	: "\\pi" >
|	< RHO	: "\\rho" >
|	< SIGMA	: "\\sigma" >
|	< TAU	: "\\tau" >
|	< UPSILON	: "\\upsilon" >
|	< PHI	: "\\phi" >
|	< CHI	: "\\chi" >
|	< PSI	: "\\psi" >
|	< OMEGA	: "\\omega" >
|	< _GAMMA	: "\\Gamma" >
|	< _DELTA	: "\\Delta" >
|	< _THETA	: "\\Theta" >
|	< _LAMDA	: "\\Lambda" >
|	< _XI		: "\\Xi" >
|	< _PI		: "\\Pi" >
|	< _SIGMA	: "\\Sigma" >
|	< _UPSILON	: "\\Upsilon" >
|	< _PHI		: "\\Phi" >
|	< _PSI		: "\\Psi" >
|	< _OMEGA	: "\\Omega" >
| 	< ANGSTROM	: "\\angstrom" >
|	< MICRO		: "\\micro" >
|   < UNICHAR	: ~[] >
}

/* The parse method */
public MathElement parse() :
{
	List<MathElement> lines = new ArrayList<MathElement>();
	MathElement me;
}
{
    (
		me = composite()
		{
			if (me != null) lines.add(me);
		}
	)
	(
		( < C_NEWLINE > | < NEWLINE > )
		me = composite()
		{
			if (me != null) lines.add(me);
		}
	)* <EOF>

	{
		if (lines.size() == 0) return MathElement.EMPTY;		if (lines.size() == 1) return lines.get(0);
		return new MathElement.XLines(lines);
	}
}

/** A group of blocks */
private MathElement.PElement composite() :
{	List<MathElement.PElement> pc = new ArrayList<MathElement.PElement>();
	MathElement.PElement me;
	MathElement.PElement math;
}
{	(
		me = block()
		{			if (me instanceof MathElement.Mrow) {				pc.addAll(((MathElement.Mrow) me).getElementList());
			} else if (me != null) {				pc.add(me);
			}
		}
	)*

	{
		if (pc.size() == 0) return null;
		if (pc.size() == 1) return pc.get(0);
		return new MathElement.Mrow(pc);
	}
}

/* a block within a line */
private MathElement.PElement block() :
{	MathElement.PElement me;
}
{	(		me = text()
	|
		me = textStyleGroup()
	|
		< LCB > me = composite() < RCB >
	|
		<MATHB> me = math() <MATHE>
	)
	{		
		return me;
	}
}

private MathElement.PElement text() :
{
	char c;
	Token t;
	StringBuilder sb = new StringBuilder();
}
{
	(		< SPACE >
		{
			sb.append(" ");
		}
	|
		c = escapeChar()
		{			sb.append(c);		}
	|
		t = < TEXTCHAR >		{			sb.append(t.image);
		}
	)+
	{		return new MathElement.Mtext(sb.toString());
	}
}

private char escapeChar() :
{
}
{
	< C_DOLLAR >
	{ return '$'; }
|
	< C_LCB >
	{ return '{'; }
|
	< C_RCB >
	{ return '}'; }
|
	< C_BACKSLASH >
	{ return '\\'; }
}

private MathElement.PElement textStyleGroup() :
{	MathElement.PElement pe;
	MathElement.MathVariant mv;
}
{	mv = textVariant() (< SPACE >)* < LCB > pe = composite() < RCB >
	{
		pe = new MathElement.Mstyle(mv, pe);
		return pe;
	}
}

private MathElement.MathVariant textVariant() :
{
}
{
    < TEXTRM >
    { return MathElement.MathVariant.NORMAL; }
    |
    < TEXTIT >
    { return MathElement.MathVariant.ITALIC; }
    |
    < TEXTBF >
    { return MathElement.MathVariant.BOLD; }
}


/* return null, single PToken, PContainer */
private MathElement.PElement math() :
{
	List<MathElement.PElement> pc = new ArrayList<MathElement.PElement>();
	Token t;
	MathElement.PElement me;
}
{
	(
		LOOKAHEAD(2)
		< MINUS > t = < MN >
		{			me = new MathElement.Mn("-" + t.image);
			pc.add(me);
		}
	|	
		me = goScript(null)
		{
			pc.add(me);
		}
	)?
	(
		me = pelement()
		{			pc.add(me);
		}
	)*

	{
		if (pc.size() == 0) return null;
		if (pc.size() == 1) return pc.get(0);
		return new MathElement.Mrow(pc);
	}
}

/* both mstyle and mrow are MathMLPresentationContainer */
private MathElement.PElement pelement() :
{
	MathElement.PElement me;
}
{
	( me = ptoken() | me = mrow() | me = mstyle() | me = mtextstyle() )
	( me = goScript(me) )?
	{
		return me;
	}
}

private MathElement.PElement ptoken() :
{	MathElement.PElement me;
}
{	( me = mi() | me = mo() | me = mn() )
	{		return me;
	}
}

private MathElement.PElement mstyle() :
{
	MathElement.MathVariant mv;
	MathElement.PElement pe;
}
{
	mv = mathVariant() < LCB > pe = math() < RCB >
	{		return new MathElement.Mstyle(mv, pe);
	}
}

private MathElement.MathVariant mathVariant() :
{
}
{
    < MATHRM >
    { return MathElement.MathVariant.NORMAL; }
    |
    < MATHIT >
    { return MathElement.MathVariant.ITALIC; }
    |
    < MATHBF >
    { return MathElement.MathVariant.BOLD; }
}

private MathElement.PElement mrow() :
{
	MathElement.PElement math;
}
{
	<LCB> math = math() <RCB>
	{
		return mrowWrap(math);
	}	
	|
	<LP> math = math() <RP>
	{
		List<MathElement.PElement> pc = new ArrayList<MathElement.PElement>();
		pc.add(new MathElement.Mo("("));
		if (math != null) pc.add(math);
		pc.add(new MathElement.Mo(")"));		return new MathElement.Mrow(pc);
	}
}

private MathElement.PElement mtextstyle() :
{
	MathElement.MathVariant mv;
	MathElement.PElement pe;
}
{
	mv = textVariant() < LCB >
	{		token_source.SwitchTo( DEFAULT );
	}
	pe = composite()
	 < RCB >
	{
		token_source.SwitchTo( MATH );
		return new MathElement.Mstyle(mv, pe);
	}
}


private MathElement.PElement mi() :
{char s;}
{
	(
	  s=alpha()	| s=beta()	| s=gamma()	| s=delta()	| s=epsilon()	| s=zeta()
	| s=eta()	| s=theta()	| s=iota()	| s=kappa()	| s=lambda()	| s=mu()
	| s=nu()	| s=xi()	| s=pi()	| s=rho()	| s=sigma()		| s=tau()
	| s=upsilon()	| s=phi()		| s=chi()	| s=psi()	| s=omega()
	| s=_gamma()	| s=_delta()	| s=_theta()|s=_lambda()| s=_xi()	| s=_pi()
	| s=_sigma()	| s=_upsilon()	| s=_phi()	| s=_psi()	| s=_omega()
	| s=micro()		| s=angstrom()	| s=unichar()
	)
	{		return new MathElement.Mi(s);
	}
}

private char _gamma()	: {}{<_GAMMA>	{return '\u0393';}}
private char _delta()	: {}{<_DELTA>	{return '\u0394';}}
private char _theta()	: {}{<_THETA>	{return '\u0398';}}
private char _lambda()	: {}{<_LAMDA>	{return '\u039b';}}
private char _xi()		: {}{<_XI>		{return '\u039e';}}
private char _pi()		: {}{<_PI>		{return '\u03a0';}}
private char _sigma()	: {}{<_SIGMA>	{return '\u03a3';}}
private char _upsilon()	: {}{<_UPSILON>	{return '\u03d2';}}
private char _phi()		: {}{<_PHI>		{return '\u03a6';}}
private char _psi()		: {}{<_PSI>		{return '\u03a8';}}
private char _omega()	: {}{<_OMEGA>	{return '\u03a9';}}
private char alpha()	: {}{<ALPHA>	{return '\u03b1';}}
private char beta()		: {}{<BETA>		{return '\u03b2';}}
private char gamma()	: {}{<GAMMA>	{return '\u03b3';}}
private char delta()	: {}{<DELTA>	{return '\u03b4';}}
private char epsilon()	: {}{<EPSILON>	{return '\u03b5';}}
private char zeta()		: {}{<ZETA>		{return '\u03b6';}}
private char eta()		: {}{<ETA>		{return '\u03b7';}}
private char theta()	: {}{<THETA>	{return '\u03b8';}}
private char iota()		: {}{<IOTA>		{return '\u03b9';}}
private char kappa()	: {}{<KAPPA>	{return '\u03ba';}}
private char lambda()	: {}{<LAMDA>	{return '\u03bb';}}
private char mu()		: {}{<MU>		{return '\u03bc';}}
private char nu()		: {}{<NU>		{return '\u03bd';}}
private char xi()		: {}{<XI>		{return '\u03be';}}
private char pi()		: {}{<PI>		{return '\u03c0';}}
private char rho()		: {}{<RHO>		{return '\u03c1';}}
private char sigma()	: {}{<SIGMA>	{return '\u03c3';}}
private char tau()		: {}{<TAU>		{return '\u03c4';}}
private char upsilon()	: {}{<UPSILON>	{return '\u03c5';}}
private char phi()		: {}{<PHI>		{return '\u03c6';}}
private char chi()		: {}{<CHI>		{return '\u03c7';}}
private char psi()		: {}{<PSI>		{return '\u03c8';}}
private char omega()	: {}{<OMEGA>	{return '\u03c9';}}

private char micro()	: {}{<MICRO>	{return '\u00b5';}}
private char angstrom()	: {}{<ANGSTROM>	{return '\u00c5';}}

private char unichar() :
{
	char c;
	Token t;
}
{
	c = escapeChar()
	{ return c; }|
	t = <UNICHAR>
	{return t.image.charAt(0);}
}

private MathElement.PElement mn() :
{Token t;}
{
	t = <MN>
	{
		return new MathElement.Mn(t.image);
	}
}

private MathElement.PElement mo() :
{Token t;}
{
	t = <MO>
	{
		String mo = t.image;
		if (mo.equals("*")) mo = "\u2217";
		return new MathElement.Mo(mo);
	}
	|
	t = < MINUS >
	{		return new MathElement.Mo("\u2212");
	}
}

/* go ahead to consum up MathMLScriptElement */
private MathElement.PElement goScript(MathElement.PElement base) :
{MathElement.PElement sub = null, sup = null;
}
{	( sub = subPart() ( sup = supPart() )? | sup = supPart() ( sub = subPart() )? )

	{		if (sub != null && sup != null) {			return new MathElement.Msubsup(base, sub, sup);
		}
		if (sub != null)		{			return new MathElement.Msub(base, sub);
		}
		if (sup != null)		{			return new MathElement.Msup(base, sup);
		}		
	}
}

private MathElement.PElement subPart() :
{
	MathElement.PElement me;
}
{
	<SUB> ( me = ptoken() | me = mrow() | me = mstyle() | me = mtextstyle() )
	{
		return me;
	}
}
private MathElement.PElement supPart() :
{
	MathElement.PElement me;
}
{
	<SUP> ( me = ptoken() | me = mrow() | me = mstyle() | me = mtextstyle() )
	{		return me;
	}
}

