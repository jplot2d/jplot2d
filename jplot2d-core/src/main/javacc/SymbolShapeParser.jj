/*
 * $Id: SymbolShapeParser.jj,v 1.2 2010/08/17 07:55:38 jli Exp $
 *
 * JavaCC file for parsing SymbolShape data string.
 *
 * Author	Jingjing Li
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
}
PARSER_BEGIN(SymbolShapeParser)
package org.jplot2d.javacc;

import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.StringReader;
import java.util.ArrayList;

public class SymbolShapeParser {

    private ArrayList<Shape> _drawShapeList = new ArrayList<Shape>();
    private ArrayList<Shape> _fillShapeList = new ArrayList<Shape>();

    public ArrayList<Shape> getDrawShapeList() {
        return _drawShapeList;
    }

    public ArrayList<Shape> getFillShapeList() {
        return _fillShapeList;
    }

}
PARSER_END(SymbolShapeParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN :
{
	< NUM: ("+"|"-")? (["0"-"9"])+ ("." (["0"-"9"])*)? | "." (["0"-"9"])* >
}

public void parse(String s) :
{
		ReInit(new StringReader(s));
		_drawShapeList.clear();
		_fillShapeList.clear();
}
{
    "{" (shape())+ "}" <EOF>
}

private void shape() :
{	Shape shape;
	boolean fill;
}
{
	( "F" shape=shapeol()
		{	fill=true; }
	| shape=shapeol()
		{	fill=false; }
	)
	{
		if (fill) {
			_fillShapeList.add(shape);
		} else {
			_drawShapeList.add(shape);
		}
	}
}

private Shape shapeol() :
{	Shape shape; }
{
	(	"A" shape=arc()
	|	"C" shape=circle()
	|	"E" shape=ellipse()
	|	"L" shape=line()
	|	"R" shape=rectangle()
	|	"P" shape=polygon()
	)
	{	return shape; }
}

private Line2D line() :
{	Point2D a, b;}
{
    a=point() b=point()
	{	return new Line2D.Double(a, b);}
}

private Arc2D arc() :
{	int type = 0;
	Rectangle2D.Double r;
	double as, ae;
}
{
	( "C" { type = 1; } | "P" { type = 2; } )?
	r=rectangle() "(" as=num() "," ae=num() ")"
	{
		// -as -ae because angle wise is not affect by AffineTransform
		return new Arc2D.Double(r, -as, -ae, type);
	}
}
private Ellipse2D circle() :
{	double x, y, r; }
{
	"(" x=num() "," y=num() "," r=num() ")"
	{	return new Ellipse2D.Double(x-r, y-r, r*2, r*2); }
}

private Ellipse2D ellipse() :
{	Rectangle2D.Double r; }
{
	r = rectangle()
	{
		return new Ellipse2D.Double(r.x, r.y, r.width, r.height);
	}
}

private Rectangle2D.Double rectangle() :
{	
	double ax, ay, bx, by;
	double x, y, w, h;
}
{
	(
	    "(" ax=num() "," ay=num()
    	( 
			")" "(" bx=num() "," by=num() ")"
			{ 
		        if (ax < bx) { x = ax; w = bx - ax; }
		        else { x = bx; w = ax - bx; }
		        if (ay < by) { y = ay; h = by - ay; }
		        else { y = by; h = ay - by; }
	        }
		|
			"," w=num() "," h=num() ")"
        	{ x = ax; y = ay; }
		)
	)
	{
		return new Rectangle2D.Double(x,y,w,h);
	}
}

private GeneralPath polygon() :
{   Point2D p,ps;
    ArrayList<Point2D> pl = new ArrayList<Point2D>();
}
{
    ps=point()
    p=point() {pl.add(p);}
    (p=point() {pl.add(p);})+
  {
    GeneralPath gp = new GeneralPath();
    gp.moveTo((float)ps.getX(), (float)ps.getY());
    for (int i=0; i<pl.size(); i++) {
        p = pl.get(i);
        gp.lineTo((float)p.getX(), (float)p.getY());
    }
    gp.closePath();
    return gp;
  }
}

private Point2D point() :
{   double x,y;}
{
    "(" x=num() "," y=num() ")"
  { return new Point2D.Double(x,y);}
}

private double num() :
{   Token t;}
{
    t=<NUM>
  { return Double.valueOf(t.image);}
}
